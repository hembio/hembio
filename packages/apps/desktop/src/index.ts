import path from "path";
import * as electronRemote from "@electron/remote/main";
import { app, session, BrowserWindow } from "electron";
import { getPluginEntry } from "./mpv";

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}

// Initialize Electron remote bridge
electronRemote.initialize();

// Disable hardware acceleration to make mpv plugin work
// app.disableHardwareAcceleration();

// Absolute path to the plugin directory.
const pluginDir =
  process.env.ELECTRON_ENV === "development"
    ? path.join(__dirname, "../../bin/mpv", process.platform)
    : path.resolve(process.cwd());

// See pitfalls section of mpv.js for details
// if (process.platform !== "linux") {
//   process.chdir(pluginDir);
// }

// Fix for latest Electron to work with mpv
app.commandLine.appendSwitch("no-sandbox");

// Disable out of blink cors
app.commandLine.appendSwitch("disable-features", "OutOfBlinkCors");

// To support a wider number of systems
app.commandLine.appendSwitch("ignore-gpu-blacklist");
app.commandLine.appendSwitch(
  "register-pepper-plugins",
  getPluginEntry(pluginDir),
);

// Support high DPI
app.commandLine.appendSwitch("high-dpi-support", "1");

// https://github.com/electron/electron/issues/18214
app.commandLine.appendSwitch("disable-site-isolation-trials");

const createWindow = async (): Promise<void> => {
  // Create the browser window.
  let mainWindow = new BrowserWindow({
    backgroundColor: "#1C1F2C",
    height: 800,
    width: 1200,
    center: true,
    useContentSize: process.platform !== "linux",
    focusable: true,
    webPreferences: {
      plugins: true,
      webSecurity: false,
      nodeIntegration: true,
      contextIsolation: false,
    },
    frame: false,
    titleBarStyle: "hidden",
  });

  // Enable Electron remote bridge
  electronRemote.enable(mainWindow.webContents);

  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    const cspHeaders = [
      "default-src 'self' 'unsafe-inline' 'unsafe-eval' devtools: data:",
      "connect-src 'self' data: ws:",
      "frame-src 'self' 'unsafe-inline' https://hembio.local:3443",
      // "frame-ancestors 'self' https://hembio.local:3443",
      "script-src 'self' 'unsafe-inline' 'unsafe-eval' devtools: hembio.local",
      "style-src 'self' 'unsafe-inline' devtools: hembio.local",
      "style-src-elem 'self' 'unsafe-inline' hembio.local fonts.googleapis.com",
      "img-src 'self' data: hembio.local",
      "media-src 'self' 'unsafe-inline' hembio.local",
      "font-src 'self' data: fonts.gstatic.com www.slant.co",
    ].join("; ");
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        "Access-Control-Allow-Origin": "*",
        "Content-Security-Policy": cspHeaders,
      },
    });
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (process.env.ELECTRON_ENV === "development") {
    mainWindow.webContents.on("before-input-event", (e, input) => {
      if (input.type === "keyDown") {
        if (input.key === "F5") {
          mainWindow.reload();
        }
        if (input.key === "F12") {
          mainWindow.webContents.toggleDevTools();
          mainWindow.webContents.on("devtools-opened", () => {
            // Can't use mainWindow.webContents.devToolsWebContents.on("before-input-event") - it just doesn't intercept any events.
            mainWindow.webContents.devToolsWebContents
              .executeJavaScript(
                `
                new Promise((resolve)=> {
                  addEventListener("keydown", (event) => {
                    if (event.key === "F12") {
                      resolve();
                    }
                  }, { once: true });
                })
              `,
              )
              .then(() => {
                mainWindow.webContents.toggleDevTools();
              });
          });
        }
      }
    });
  }

  mainWindow.on("closed", () => {
    // Dereference the window object, usually you would store windows
    // in an array if your app supports multi windows, this is the time
    // when you should delete the corresponding element.
    mainWindow = null;
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  createWindow();

  app.on("activate", () => {
    // On macOS it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
      createWindow();
    }
  });

  // Quit when all windows are closed, except on macOS. There, it's common
  // for applications and their menu bar to stay active until the user quits
  // explicitly with Cmd + Q.
  app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
      app.quit();
    }
  });
});
